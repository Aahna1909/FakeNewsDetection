#IQR -interquartile range


import csv
import matplotlib.pyplot as plt
import seaborn as sns
from urllib.request  import urlretrieve
import numpy as np
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import DBSCAN
from sklearn.neighbors import NearestNeighbors
import scipy.stats as st
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline
urlretrieve('https://raw.githubusercontent.com/Aahna1909/data-Analysis-AQI/main/Sample.csv%20-%20Sheet1.csv','2018.csv')
df = pd.read_csv('2018.csv')
df.head()
df.dtypes
df.drop(['StationId','NO','NOx','NH3','Benzene','Xylene','Toluene'],axis =1,inplace = True)
df =  df.dropna()
df['Date'] = pd.to_datetime(df.Date)
df.info()
df.describe()
print(df.head())
df.shape


plt.figure(figsize =(15,15))
plt.subplot(6,2,1)
sns.lineplot(x=df.Date,y= df.PM10,color ='red')
plt.title("PM10 graph",fontsize = 10)
plt.xlabel('Date')
plt.ylabel('PM10')
plt.subplot(6,2,2)
sns.lineplot(x=df.Date,y= df['PM2.5'],color ='blue')
plt.title("PM2.5 graph",fontsize = 10)
plt.xlabel('Date')
plt.ylabel('PM2.5')
plt.subplot(6,2,3)
sns.lineplot(x=df.Date,y= df.NO2,color ='indigo')
plt.title("NO2 graph",fontsize = 10)
plt.xlabel('Date')
plt.ylabel('NO2')
plt.subplot(6,2,4)
sns.lineplot(x=df.Date,y= df.CO,color ='green')
plt.title("CO graph",fontsize = 10)
plt.xlabel('Date')
plt.ylabel('CO')
plt.subplot(6,2,5)
sns.lineplot(x=df.Date,y= df.O3,color ='yellow')
plt.title("O3 graph",fontsize = 10)
plt.xlabel('Date')
plt.ylabel('O3')
plt.subplot(6,2,6)
sns.lineplot(x=df.Date,y= df.SO2,color ='fuchsia')
plt.title("SO2 graph",fontsize = 10)
plt.xlabel('Date')
plt.ylabel('SO2')


plt.figure(figsize=(15,15))
plt.subplot(6,1,1)
sns.boxplot(df['PM2.5'])
plt.xticks(fontsize = (12))
plt.xlabel('PM2.5')
plt.legend (title="PM2.5", fontsize=10, title_fontsize=15)
plt.subplot(6,1,2)
sns.boxplot(df['PM10'])
plt.xticks(fontsize = (12))
plt.xlabel('PM10')
plt.legend (title="PM10", fontsize=10, title_fontsize=15)
plt.subplot(6,1,3)
sns.boxplot(df['NO2'])
plt.xticks(fontsize = (12))
plt.xlabel('NO2')
plt.legend (title="NO2", fontsize=10, title_fontsize=15)
plt.subplot(6,1,4)
sns.boxplot(df['SO2'])
plt.xticks(fontsize = (12))
plt.xlabel('SO2')
plt.legend (title="SO2", fontsize=10, title_fontsize=15)
plt.subplot(6,1,5)
sns.boxplot(df['O3'])
plt.xticks(fontsize = (12))
plt.xlabel('O3')
plt.legend (title="O3", fontsize=10, title_fontsize=15)
plt.subplot(6,1,6)
sns.boxplot(df['CO'])
plt.xticks(fontsize = (12))
plt.xlabel('CO')
plt.legend (title="CO", fontsize=10, title_fontsize=15)
       
print("After the outliers have been dealt with, the graphs are as follows:  ")

def identifying_and_treating_outlier(df,col,remove_or_fill_with_quartile):
    q1 = df[col].quantile(0.25)
    q3 = df[col].quantile(0.75)
    iqr = q3-q1
    lower_fence=q1-1.5*(iqr)
    upper_fence=q3+1.5*(iqr)
    print('Lower Fence;', lower_fence)
    print('Upper Fence:', upper_fence)
    if remove_or_fill_with_quartile=="drop":
        df.drop(df.loc[df[col]<lower_fence].index,inplace=True)
        df.drop(df.loc[df[col]>upper_fence].index,inplace=True)     
    elif remove_or_fill_with_quartile=="fill":
            df[col] = np.where(df[col] < lower_fence, lower_fence, df[col])
            df[col] = np.where(df[col] > upper_fence, upper_fence, df[col])


identifying_and_treating_outlier(df,'PM10','drop')
identifying_and_treating_outlier(df,'PM2.5','fill')
identifying_and_treating_outlier(df,'O3','fill')
identifying_and_treating_outlier(df,'NO2','fill')
identifying_and_treating_outlier(df,'SO2','fill')
identifying_and_treating_outlier(df,'CO','fill')            


plt.figure(figsize=(15,15))
plt.subplot(6,1,1)
sns.boxplot(df['PM2.5'])
plt.xticks(fontsize = (12))
plt.xlabel('PM2.5')
plt.legend (title="PM2.5", fontsize=10, title_fontsize=15)
plt.subplot(6,1,2)
sns.boxplot(df['PM10'])
plt.xticks(fontsize = (12))
plt.xlabel('PM10')
plt.legend (title="PM10", fontsize=10, title_fontsize=15)
plt.subplot(6,1,3)
sns.boxplot(df['NO2'])
plt.xticks(fontsize = (12))
plt.xlabel('NO2')
plt.legend (title="NO2", fontsize=10, title_fontsize=15)
plt.subplot(6,1,4)
sns.boxplot(df['SO2'])
plt.xticks(fontsize = (12))
plt.xlabel('SO2')
plt.legend (title="SO2", fontsize=10, title_fontsize=15)
plt.subplot(6,1,5)
sns.boxplot(df['O3'])
plt.xticks(fontsize = (12))
plt.xlabel('O3')
plt.legend (title="O3", fontsize=10, title_fontsize=15)
plt.subplot(6,1,6)
sns.boxplot(df['CO'])
plt.xticks(fontsize = (12))
plt.xlabel('CO')
plt.legend (title="CO", fontsize=10, title_fontsize=15)
       
plt.figure(figsize =(15,15))
plt.subplot(6,2,1)
sns.lineplot(x=df.Date,y= df.PM10,color ='red')
plt.title("PM10 graph",fontsize = 10)
plt.xlabel('Date')
plt.ylabel('PM10')
plt.subplot(6,2,2)
sns.lineplot(x=df.Date,y= df['PM2.5'],color ='blue')
plt.title("PM2.5 graph",fontsize = 10)
plt.xlabel('Date')
plt.ylabel('PM2.5')
plt.subplot(6,2,3)
sns.lineplot(x=df.Date,y= df.NO2,color ='indigo')
plt.title("NO2 graph",fontsize = 10)
plt.xlabel('Date')
plt.ylabel('NO2')
plt.subplot(6,2,4)
sns.lineplot(x=df.Date,y= df.CO,color ='green')
plt.title("CO graph",fontsize = 10)
plt.xlabel('Date')
plt.ylabel('CO')
plt.subplot(6,2,5)
sns.lineplot(x=df.Date,y= df.O3,color ='yellow')
plt.title("O3 graph",fontsize = 10)
plt.xlabel('Date')
plt.ylabel('O3')
plt.subplot(6,2,6)
sns.lineplot(x=df.Date,y= df.SO2,color ='fuchsia')
plt.title("SO2 graph",fontsize = 10)
plt.xlabel('Date')
plt.ylabel('SO2')